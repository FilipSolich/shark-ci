version: '3'

vars:
  MODULE: github.com/shark-ci/shark-ci
  SERVER_IMAGE: shark-ci/server
  WORKER_IMAGE: shark-ci/worker
  DOCKER_REGISTRY: ghcr.io
  DATETIME:
    sh: date --utc --rfc-3339=seconds
  VERSION:
    sh: git describe --tags --match 'v*' --abbrev=0 --always | sed 's/^v//'
  REVISION:
    sh: git rev-parse HEAD

dotenv: ['.env']

interval: '1s'

tasks:
  build:
    desc: Build CI server and worker
    aliases: ["b"]
    cmds:
      - task: build:server
      - task: build:worker

  build:server:
    desc: Build CI server
    cmds:
      - go build -o bin/server {{.MODULE}}/cmd/server
    sources:
      - cmd/server/*.go
      - internal/**/*.go
      - exclude: internal/worker/*
    generates:
      - bin/server
    method: timestamp

  build:worker:
    desc: Build worker
    cmds:
      - go build -o bin/worker {{.MODULE}}/cmd/worker
    sources:
      - cmd/worker/*.go
      - internal/**/*.go
      - exclude: internal/server/*
    generates:
      - bin/worker
    method: timestamp

  run:
    desc: Run CI server and worker
    aliases: ["r"]
    deps:
      - run:server
      - run:worker

  run:server:
    desc: Run server
    deps:
      - build:server
    cmds:
      - bin/server

  run:worker:
    desc: Run worker
    deps:
      - build:worker
    cmds:
      - bin/worker

  clean:
    desc: Clean build artifacts
    aliases: ["c"]
    cmds:
      - go clean
      - rm -rf bin
      - rm -rf .task

  test:
    desc: Run tests
    aliases: ["t"]
    cmds:
      - go test -v ./...

  ngrok:
    desc: Startup Ngrok
    cmds:
      - ngrok http --domain {{.NGROK_DOMAIN}} 8000

  docker:build:
    desc: Build docker images
    cmds:
      - task: docker:build:server
      - task: docker:build:worker

  docker:build:server:
    desc: Build CI server docker image
    cmds:
      - docker build --pull -f Dockerfile.server -t {{.SERVER_IMAGE}}
        --build-arg CREATED="{{.DATETIME}}"
        --build-arg VERSION={{.VERSION}}
        --build-arg REVISION={{.REVISION}} .

  docker:build:worker:
    desc: Build worker docker image
    cmds:
      - docker build --pull -f Dockerfile.worker -t {{.WORKER_IMAGE}}
        --build-arg CREATED="{{.DATETIME}}"
        --build-arg VERSION={{.VERSION}}
        --build-arg REVISION={{.REVISION}} .

  docker:tag:
    desc: Tag images
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - task: docker:tag:server
        vars:
          TAG: "{{.TAG}}"
      - task: docker:tag:worker
        vars:
          TAG: "{{.TAG}}"

  docker:tag:server:
    desc: Tag CI server docker image
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - docker tag {{.SERVER_IMAGE}}:latest {{.SERVER_IMAGE}}:{{.TAG}}
      - docker tag {{.SERVER_IMAGE}}:latest {{.DOCKER_REGISTRY}}/{{.SERVER_IMAGE}}:{{.TAG}}

  docker:tag:worker:
    desc: Tag worker docker image
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - docker tag {{.WORKER_IMAGE}}:latest {{.WORKER_IMAGE}}:{{.TAG}}
      - docker tag {{.WORKER_IMAGE}}:latest {{.DOCKER_REGISTRY}}/{{.WORKER_IMAGE}}:{{.TAG}}

  docker:push:
    desc: Push images to container registry
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - task: docker:push:server
        vars:
          TAG: "{{.TAG}}"
      - task: docker:push:worker
        vars:
          TAG: "{{.TAG}}"

  docker:push:server:
    desc: Push CI server to container registry
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - docker push {{.DOCKER_REGISTRY}}/{{.SERVER_IMAGE}}:{{.TAG}}

  docker:push:worker:
    desc: Push worker to container registry
    vars:
      TAG: '{{default "latest" .TAG}}'
    cmds:
      - docker push {{.DOCKER_REGISTRY}}/{{.WORKER_IMAGE}}:{{.TAG}}

  migrate:create:
    desc: Create new migration file
    cmds:
      - migrate create -ext sql -dir sql/migrations -format 20060102150405 {{.CLI_ARGS}}

  migrate:up:
    desc: Run migrations up
    cmds:
      - migrate -path sql/migrations -database ${DB_URI} -verbose up

  migrate:down:
    desc: Run migrations down
    cmds:
      - migrate -path sql/migrations -database ${DB_URI} -verbose down

  release:
    desc: Create new release
    prompt: Do you want to create a new release?
    deps:
      - docker:build
    cmds:
      - git tag -s v{{.VERSION}} -m "Release v{{.VERSION}}"
      - git push origin v{{.VERSION}}
      - task: docker:tag
      - task: docker:tag
        vars:
          TAG: "{{.VERSION}}"
      - task: docker:push
      - task: docker:push
        vars:
          TAG: "{{.VERSION}}"
    requires:
      vars: ["VERSION"]

  generate:
    desc: Generate code
    cmds:
      - sqlc generate
      - protoc --go_out=. --go_opt=paths=source_relative
        --go-grpc_out=. --go-grpc_opt=paths=source_relative
        internal/proto/pipeline_reporter.proto
