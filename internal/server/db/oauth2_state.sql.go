// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: oauth2_state.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const cleanOAuth2State = `-- name: CleanOAuth2State :exec
DELETE FROM "oauth2_state"
WHERE expire < NOW()
`

func (q *Queries) CleanOAuth2State(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanOAuth2State)
	return err
}

const createOAuth2State = `-- name: CreateOAuth2State :exec
INSERT INTO "oauth2_state" (state, expire)
VALUES ($1, $2)
`

type CreateOAuth2StateParams struct {
	State  uuid.UUID
	Expire pgtype.Timestamp
}

func (q *Queries) CreateOAuth2State(ctx context.Context, arg CreateOAuth2StateParams) error {
	_, err := q.db.Exec(ctx, createOAuth2State, arg.State, arg.Expire)
	return err
}

const getAndDeleteOAuth2State = `-- name: GetAndDeleteOAuth2State :one
DELETE FROM "oauth2_state"
WHERE state = $1
RETURNING expire
`

func (q *Queries) GetAndDeleteOAuth2State(ctx context.Context, state uuid.UUID) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, getAndDeleteOAuth2State, state)
	var expire pgtype.Timestamp
	err := row.Scan(&expire)
	return expire, err
}
