// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: pipeline.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPipeline = `-- name: CreatePipeline :exec
INSERT INTO public.pipeline (status,  clone_url, commit_sha, repo_id)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreatePipelineParams struct {
	Status    string
	CloneUrl  string
	CommitSha string
	RepoID    int64
}

func (q *Queries) CreatePipeline(ctx context.Context, arg CreatePipelineParams) error {
	_, err := q.db.Exec(ctx, createPipeline,
		arg.Status,
		arg.CloneUrl,
		arg.CommitSha,
		arg.RepoID,
	)
	return err
}

const pipelineFinished = `-- name: PipelineFinished :exec
Update public.pipeline
SET status = $1, finished_at = $2
WHERE id = $3
`

type PipelineFinishedParams struct {
	Status     string
	FinishedAt pgtype.Timestamp
	ID         int64
}

func (q *Queries) PipelineFinished(ctx context.Context, arg PipelineFinishedParams) error {
	_, err := q.db.Exec(ctx, pipelineFinished, arg.Status, arg.FinishedAt, arg.ID)
	return err
}

const pipelineStarted = `-- name: PipelineStarted :exec
UPDATE public.pipeline
SET status = $1, started_at = $2
WHERE id = $3
`

type PipelineStartedParams struct {
	Status    string
	StartedAt pgtype.Timestamp
	ID        int64
}

func (q *Queries) PipelineStarted(ctx context.Context, arg PipelineStartedParams) error {
	_, err := q.db.Exec(ctx, pipelineStarted, arg.Status, arg.StartedAt, arg.ID)
	return err
}

const setPipelineUrl = `-- name: SetPipelineUrl :exec
UPDATE public.pipeline
SET url = $1
WHERE id = $2
`

type SetPipelineUrlParams struct {
	Url pgtype.Text
	ID  int64
}

func (q *Queries) SetPipelineUrl(ctx context.Context, arg SetPipelineUrlParams) error {
	_, err := q.db.Exec(ctx, setPipelineUrl, arg.Url, arg.ID)
	return err
}
