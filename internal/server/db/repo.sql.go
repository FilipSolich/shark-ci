// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: repo.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRegisterWebhookInfoByRepo = `-- name: GetRegisterWebhookInfoByRepo :one
SELECT r.service, r.owner, r.name, su.access_token, su.refresh_token, su.token_type, su.token_expire
FROM public.repo r JOIN public.service_user su ON r.service_user_id = su.id
WHERE r.id = $1
`

type GetRegisterWebhookInfoByRepoRow struct {
	Service      Service
	Owner        string
	Name         string
	AccessToken  string
	RefreshToken pgtype.Text
	TokenType    string
	TokenExpire  pgtype.Timestamp
}

func (q *Queries) GetRegisterWebhookInfoByRepo(ctx context.Context, id int64) (GetRegisterWebhookInfoByRepoRow, error) {
	row := q.db.QueryRow(ctx, getRegisterWebhookInfoByRepo, id)
	var i GetRegisterWebhookInfoByRepoRow
	err := row.Scan(
		&i.Service,
		&i.Owner,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.TokenExpire,
	)
	return i, err
}

const getReposByUser = `-- name: GetReposByUser :many
SELECT r.id, r.service, r.owner, r.name, r.repo_service_id, r.webhook_id, r.service_user_id
FROM public.repo r JOIN public.service_user su ON r.service_user_id = su.id
WHERE su.user_id = $1
`

func (q *Queries) GetReposByUser(ctx context.Context, userID int64) ([]Repo, error) {
	rows, err := q.db.Query(ctx, getReposByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.Owner,
			&i.Name,
			&i.RepoServiceID,
			&i.WebhookID,
			&i.ServiceUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setRepoWebhook = `-- name: SetRepoWebhook :exec
UPDATE public.repo
SET webhook_id = $1
WHERE id = $2
`

type SetRepoWebhookParams struct {
	WebhookID pgtype.Int8
	ID        int64
}

func (q *Queries) SetRepoWebhook(ctx context.Context, arg SetRepoWebhookParams) error {
	_, err := q.db.Exec(ctx, setRepoWebhook, arg.WebhookID, arg.ID)
	return err
}
